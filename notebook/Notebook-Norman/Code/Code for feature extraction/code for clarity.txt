import cv2
import numpy as np
import pandas as pd
import os
import glob
from skimage.feature import graycomatrix, graycoprops

def extract_clarity_features(image_path):
    """
    Extract clarity-related features from a gemstone image.
    
    Parameters:
        image_path (str): Path to the image file.
    
    Returns:
        dict: Extracted features.
    """
    features = {}
    # Read and preprocess the image
    image = cv2.imread(image_path)
    if image is None:
        print(f"Warning: Unable to read image {image_path}. Skipping.")
        return None

    gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)

    # 1. Texture Analysis using GLCM
    glcm = graycomatrix(gray, distances=[1], angles=[0], levels=256, symmetric=True, normed=True)
    features['Contrast'] = graycoprops(glcm, 'contrast')[0, 0]
    features['Homogeneity'] = graycoprops(glcm, 'homogeneity')[0, 0]
    features['Energy'] = graycoprops(glcm, 'energy')[0, 0]
    features['Correlation'] = graycoprops(glcm, 'correlation')[0, 0]

    # 2. Edge Density
    edges = cv2.Canny(gray, threshold1=50, threshold2=150)
    edge_density = np.sum(edges) / (gray.shape[0] * gray.shape[1])
    features['Edge_Density'] = edge_density

    # 3. Variance of Intensity
    features['Intensity_Variance'] = np.var(gray)

    # 4. Color Uniformity
    hsv = cv2.cvtColor(image, cv2.COLOR_BGR2HSV)
    hue_std = np.std(hsv[:, :, 0])
    saturation_std = np.std(hsv[:, :, 1])
    features['Hue_Std'] = hue_std
    features['Saturation_Std'] = saturation_std

    # 5. Add image name
    features['Image'] = os.path.basename(image_path)

    return features

def process_images(input_folder, output_folder, output_csv):
    """
    Process all images in the input folder and extract clarity-related features.
    
    Parameters:
        input_folder (str): Path to the input folder containing images.
        output_folder (str): Path to the output folder to save CSV.
        output_csv (str): Name of the output CSV file.
    """
    # Supported image extensions
    image_extensions = ['*.png', '*.jpg', '*.jpeg', '*.bmp', '*.tiff']

    # Gather all image paths
    image_paths = []
    for ext in image_extensions:
        image_paths.extend(glob.glob(os.path.join(input_folder, ext)))

    if not image_paths:
        print(f"No images found in {input_folder}. Please check the path and file extensions.")
        return

    # List to hold all feature dictionaries
    all_features = []

    for img_path in image_paths:
        features = extract_clarity_features(img_path)
        if features:
            all_features.append(features)

    if not all_features:
        print("No features extracted. Please check the images and try again.")
        return

    # Create DataFrame
    df = pd.DataFrame(all_features)

    # Ensure output folder exists
    os.makedirs(output_folder, exist_ok=True)

    # Save to CSV
    csv_path = os.path.join(output_folder, output_csv)
    df.to_csv(csv_path, index=False)
    print(f"Clarity feature extraction completed. CSV saved at {csv_path}")

if __name__ == "__main__":
    # Define input and output paths
    input_folder = r"C:\Users\Muralish\Desktop\Sapphires_Cleaned\Blue Sapphires\page1\B9543\cleaned\B9543_video2"
    output_folder = os.path.join(input_folder, "FE")
    output_csv = "clarity_features.csv"

    process_images(input_folder, output_folder, output_csv)
